{"version":3,"sources":["../src/index.js"],"names":["objParse","objSize","objOffsetOf","objSizeOf","getFmtString","schema","fmtStr","forEach","desc","type","buffer","offset","len","CalcLength","ab","ArrayBuffer","targetView","Uint8Array","sourceView","i","arrObj","Unpack","obj","length","name"],"mappings":";;;;;QA+BgBA,Q,GAAAA,Q;QA0BAC,O,GAAAA,O;QAYAC,W,GAAAA,W;QAsBAC,S,GAAAA,S;;AArFhB;;AAEA;;;;;AAKA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAIC,SAAS,GAAb;;AAEAD,SAAOE,OAAP,CAAe,gBAAQ;AACrBD,cAAUE,KAAKC,IAAf;AACD,GAFD;;AAIA,SAAOH,MAAP;AACD;;AAED;;;;;;;;AAvBA;;;;;;AA+BO,SAASN,QAAT,CAAkBU,MAAlB,EAA0BL,MAA1B,EAA8C;AAAA,MAAZM,MAAY,uEAAH,CAAG;;AACnD,MAAML,SAASF,aAAaC,MAAb,CAAf;;AAEA,MAAMO,MAAM,eAAOC,UAAP,CAAkBP,MAAlB,CAAZ;;AAEA,MAAMQ,KAAK,IAAIC,WAAJ,CAAgBH,GAAhB,CAAX;AACA,MAAMI,aAAa,IAAIC,UAAJ,CAAeH,EAAf,CAAnB;AACA,MAAMI,aAAa,IAAID,UAAJ,CAAeP,MAAf,CAAnB;;AAEA,OAAI,IAAIS,IAAI,CAAZ,EAAeA,IAAIP,GAAnB,EAAwBO,GAAxB;AACEH,eAAWG,CAAX,IAAgBD,WAAWP,SAASQ,CAApB,CAAhB;AADF,GAGA,IAAMC,SAAS,eAAOC,MAAP,CAAcf,MAAd,EAAsBU,UAAtB,CAAf;;AAEA,MAAMM,MAAM,EAAZ;AACA,OAAI,IAAIH,KAAI,CAAZ,EAAeA,KAAId,OAAOkB,MAA1B,EAAkCJ,IAAlC;AACEG,QAAIjB,OAAOc,EAAP,EAAUK,IAAd,IAAsBJ,OAAOD,EAAP,CAAtB;AADF,GAGA,OAAOG,GAAP;AACD;;AAED;;;;;AAKO,SAASrB,OAAT,CAAiBI,MAAjB,EAAyB;AAC9B,MAAMC,SAASF,aAAaC,MAAb,CAAf;;AAEA,SAAO,eAAOQ,UAAP,CAAkBP,MAAlB,CAAP;AACD;;AAED;;;;;;AAMO,SAASJ,WAAT,CAAqBG,MAArB,EAA6BmB,IAA7B,EAAmC;AACxC,MAAIlB,SAAS,GAAb;;AAEA,MAAIa,UAAJ;AACA,OAAIA,IAAI,CAAR,EAAWA,IAAId,OAAOkB,MAAtB,EAA8BJ,GAA9B,EAAmC;AACjC,QAAGd,OAAOc,CAAP,EAAUK,IAAV,KAAmBA,IAAtB,EACE;AACFlB,cAAUD,OAAOc,CAAP,EAAUV,IAApB;AACD;;AAED,MAAGU,MAAMd,OAAOkB,MAAhB,EACE,OAAO,CAAC,CAAR;;AAEF,SAAO,eAAOV,UAAP,CAAkBP,MAAlB,CAAP;AACD;;AAED;;;;;;AAMO,SAASH,SAAT,CAAmBE,MAAnB,EAA2BmB,IAA3B,EAAiC;AACtC,OAAI,IAAIL,IAAI,CAAZ,EAAeA,IAAId,OAAOkB,MAA1B,EAAkCJ,GAAlC,EAAuC;AACrC,QAAGd,OAAOc,CAAP,EAAUK,IAAV,KAAmBA,IAAtB,EACE,OAAO,eAAOX,UAAP,CAAkBR,OAAOc,CAAP,EAAUV,IAA5B,CAAP;AACH;;AAED,SAAO,CAAC,CAAR;AACD","file":"index.js","sourcesContent":["/**\n * A module to create structures using jsunpack\n *\n * By Fotis Loukos <me@fotisl.com>\n * @module jsunpack-struct\n */\nimport { jspack } from 'jspack';\n\n/**\n * Get the format string that corresponds to a schema.\n * @param {Array.<Object>} schema - The schema.\n * @return {string} The format string.\n */\nfunction getFmtString(schema) {\n  let fmtStr = '<';\n\n  schema.forEach(desc => {\n    fmtStr += desc.type;\n  });\n\n  return fmtStr;\n}\n\n/**\n * Parse a buffer containing binary data based on a schema starting from an\n * offset and return everything as an object.\n * @param {ArrayBuffer} buffer - The buffer containing the binary data.\n * @param {Array.<Object>} schema - The schema.\n * @param {number} offset - The offset in the buffer to start parsing.\n * @return {object} The parsed data as an object.\n */\nexport function objParse(buffer, schema, offset = 0) {\n  const fmtStr = getFmtString(schema);\n\n  const len = jspack.CalcLength(fmtStr);\n\n  const ab = new ArrayBuffer(len);\n  const targetView = new Uint8Array(ab);\n  const sourceView = new Uint8Array(buffer);\n\n  for(let i = 0; i < len; i++)\n    targetView[i] = sourceView[offset + i];\n\n  const arrObj = jspack.Unpack(fmtStr, targetView);\n\n  const obj = {};\n  for(let i = 0; i < schema.length; i++)\n    obj[schema[i].name] = arrObj[i];\n\n  return obj;\n}\n\n/**\n * Get the size of an object based on a schema.\n * @param {Array.<Object>} schema - The schema.\n * @return {number} The size of the object.\n */\nexport function objSize(schema) {\n  const fmtStr = getFmtString(schema);\n\n  return jspack.CalcLength(fmtStr);\n}\n\n/**\n * Get the offset of a field in a schema.\n * @param {Array.<Object>} schema - The schema.\n * @param {string} name - The name of the field.\n * @return {number} The offset of the field or -1 in case of an invalid field.\n */\nexport function objOffsetOf(schema, name) {\n  let fmtStr = '<';\n\n  let i;\n  for(i = 0; i < schema.length; i++) {\n    if(schema[i].name === name)\n      break;\n    fmtStr += schema[i].type;\n  }\n\n  if(i === schema.length)\n    return -1;\n\n  return jspack.CalcLength(fmtStr);\n}\n\n/**\n * Get the size of a field in a schema.\n * @param {Array.<Object>} schema - The schema.\n * @param {string} name - The name of the field.\n * @return {number} The offset of the field.\n */\nexport function objSizeOf(schema, name) {\n  for(let i = 0; i < schema.length; i++) {\n    if(schema[i].name === name)\n      return jspack.CalcLength(schema[i].type);\n  }\n\n  return -1;\n}\n"]}